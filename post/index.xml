<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mechanical Ninja</title>
    <link>http://blog.mechanical.ninja/post/</link>
    <description>Recent content in Posts on Mechanical Ninja</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Jun 2015 13:41:13 +0200</lastBuildDate>
    <atom:link href="http://blog.mechanical.ninja/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Deploying a private and secure Docker registry</title>
      <link>http://blog.mechanical.ninja/post/docker/deploy-simple-registry/</link>
      <pubDate>Sun, 07 Jun 2015 13:41:13 +0200</pubDate>
      
      <guid>http://blog.mechanical.ninja/post/docker/deploy-simple-registry/</guid>
      <description>

&lt;p&gt;Let&amp;rsquo;s deploy a private Docker registry that we can use for solo development or in a small team.&lt;/p&gt;

&lt;p&gt;To keep the setup simple we&amp;rsquo;ll use Basic HTTP Auth instead of the more elaborate &lt;a href=&#34;http://docs.docker.com/registry/spec/auth/token/&#34;&gt;token authentication&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A server (I used the smallest DigitalOcean instance).&lt;/li&gt;
&lt;li&gt;A domain name.&lt;/li&gt;
&lt;li&gt;A SSL certificate for our domain, which can be purchased cheaply from e.g. SSLs.com. (Hopefully &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; will make this &lt;a href=&#34;https://twitter.com/zoobab/status/607563008022355969&#34;&gt;easier and cheaper&lt;/a&gt; soon!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;setting-up-the-server:8203300be8c03c5fae40f9de3748014e&#34;&gt;Setting up the server&lt;/h2&gt;

&lt;p&gt;To run the Docker registry we&amp;rsquo;ll use the &lt;a href=&#34;https://docs.docker.com/registry/&#34;&gt;&lt;code&gt;registry:2.0&lt;/code&gt; container&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To handle SSL and authentication, we&amp;rsquo;ll use nginx, specifically the &lt;a href=&#34;https://github.com/jwilder/nginx-proxy&#34;&gt;&lt;code&gt;jwilder/nginx-proxy&lt;/code&gt; container&lt;/a&gt;. This proxy will also make it easy for us to deploy other outward-facing containers.&lt;/p&gt;

&lt;p&gt;On the server, any Linux distribution that runs a recent version of Docker will do. I used the latest version of CoreOS.&lt;/p&gt;

&lt;h3 id=&#34;starting-the-docker-registry:8203300be8c03c5fae40f9de3748014e&#34;&gt;Starting the Docker Registry&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll keep the registry data out of the container, so that the data is persisted independently of the container&amp;rsquo;s lifecycle.&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;$HOME/registry/storage&lt;/code&gt; directory, and run the following to start the registry:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -d \
    -p 127.0.0.1::5000
    -v $HOME/registry/storage:/registry \
    -e REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/registry \
    -e VIRTUAL_HOST=&amp;lt;your-domain-name&amp;gt; \
    --name registry \
    registry:2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;VIRTUAL_HOST&lt;/code&gt; setting will be used by &lt;code&gt;nginx-proxy&lt;/code&gt; (see below).&lt;/p&gt;

&lt;p&gt;To verify that it&amp;rsquo;s running, first let&amp;rsquo;s find out to which port the container&amp;rsquo;s port 5000 is mapped. Run &lt;code&gt;docker ps&lt;/code&gt; and look for a line containing something like &lt;code&gt;127.0.0.1:32774-&amp;gt;5000/tcp&lt;/code&gt;. In this case, the port is 32774.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;curl http://localhost:32774/v2/&lt;/code&gt; (where 32774 is the port you saw on &lt;code&gt;docker ps&lt;/code&gt;). The Docker registry will return &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;obtaining-a-ssl-certificate:8203300be8c03c5fae40f9de3748014e&#34;&gt;Obtaining a SSL certificate&lt;/h3&gt;

&lt;p&gt;If you already have a SSL certificate for your domain, skip this step.&lt;/p&gt;

&lt;p&gt;Otherwise, you&amp;rsquo;ll need to generate a certificate request. An easy way to do so is to head over to &lt;a href=&#34;https://www.digicert.com/easy-csr/openssl.htm&#34;&gt;DigiCert&amp;rsquo;s OpenSSL CSR Wizard&lt;/a&gt; and fill in the form.&lt;/p&gt;

&lt;p&gt;Click &amp;lsquo;Generate&amp;rsquo; and paste the &lt;code&gt;openssl req...&lt;/code&gt; command from the wizard onto your shell. You&amp;rsquo;ll get a &lt;code&gt;&amp;lt;domain&amp;gt;.csr&lt;/code&gt; file that you&amp;rsquo;ll have to send to your SSL provider to obtain the certificate. I bought mine off SSLs.com for $3.88 (only 1 year). You&amp;rsquo;ll also get a &lt;code&gt;&amp;lt;domain&amp;gt;.key&lt;/code&gt;. We&amp;rsquo;ll use both files later.&lt;/p&gt;

&lt;p&gt;If you used a cheap provider you&amp;rsquo;ll receive a bunch of certificates, which you&amp;rsquo;ll need to concatenate into a bundle. In the case of a Comodo certificate, you&amp;rsquo;d have to do so as follows (the order matters!):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat &amp;lt;yourdomain&amp;gt;.crt \
    COMODORSADomainValidationSecureServerCA.crt \
    COMODORSAAddTrustCA.crt \
    AddTrustExternalCARoot.crt \
    &amp;gt; bundle.csr
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;setting-up-nginx-proxy:8203300be8c03c5fae40f9de3748014e&#34;&gt;Setting up nginx-proxy&lt;/h3&gt;

&lt;p&gt;Create the directories to store the certificate, the passwords and the vhost settings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir -p $HOME/nginx/{certs,vhost.d,passwords}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;ssl-certificate:8203300be8c03c5fae40f9de3748014e&#34;&gt;SSL Certificate&lt;/h4&gt;

&lt;p&gt;Copy your certificate (or bundle) as &lt;code&gt;nginx/certs/&amp;lt;your-domain-name&amp;gt;.crt&lt;/code&gt; and your &lt;code&gt;.key&lt;/code&gt; file as &lt;code&gt;nginx/certs/&amp;lt;your-domain-name&amp;gt;.key&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;vhost-settings:8203300be8c03c5fae40f9de3748014e&#34;&gt;VHost Settings&lt;/h4&gt;

&lt;p&gt;Create a file under &lt;code&gt;nginx/vhost.d&lt;/code&gt; named &lt;code&gt;&amp;lt;your-domain-name&amp;gt;&lt;/code&gt;, with this contents:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;client_max_body_size 100m;
auth_basic &amp;quot;Restricted&amp;quot;;
auth_basic_user_file /etc/nginx/passwords/&amp;lt;your-domain-name&amp;gt;;
add_header Docker-Distribution-API-Version registry/2.0 always;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tweak the &lt;code&gt;client_max_body_size&lt;/code&gt; as desired. That will be the maximum upload size for Docker.&lt;/p&gt;

&lt;h4 id=&#34;password:8203300be8c03c5fae40f9de3748014e&#34;&gt;Password&lt;/h4&gt;

&lt;p&gt;For each user, run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ printf &amp;quot;&amp;lt;username&amp;gt;:$(openssl passwd -crypt &amp;lt;password&amp;gt;)n&amp;quot; \
    &amp;gt;&amp;gt; $HOME/nginx/passwords/&amp;lt;your-domain-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will result on a file named &lt;code&gt;nginx/passwords/&amp;lt;you-domain-name&amp;gt;&lt;/code&gt; containing, for each user:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;username&amp;gt;:&amp;lt;password-hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;start-the-nginx-proxy:8203300be8c03c5fae40f9de3748014e&#34;&gt;Start the nginx proxy&lt;/h4&gt;

&lt;p&gt;Run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -d -p 443:443 \
    -v $HOME/nginx/certs:/etc/nginx/certs:ro \
    -v $HOME/nginx/vhost.d:/etc/nginx/vhost.d:ro \
    -v $HOME/nginx/passwords:/etc/nginx/passwords:ro \
    -v /var/run/docker.sock:/tmp/docker.sock:ro \
    --name nginx \
    jwilder/nginx-proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Optionally, you may want to see the nginx logs, which are discarded by default. To do this, create a &lt;code&gt;nginx/log&lt;/code&gt; directory and add the following line to the previous command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-v $HOME/nginx/log:/var/log/nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this &lt;code&gt;docker run&lt;/code&gt; command will start &lt;code&gt;nginx&lt;/code&gt; listening on port 443, and it will automatically set up a virtual host for our docker registry based on its &lt;code&gt;VIRTUAL_HOST&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;h2 id=&#34;log-in:8203300be8c03c5fae40f9de3748014e&#34;&gt;Log in&lt;/h2&gt;

&lt;p&gt;To log into our Docker registry, simply run &lt;code&gt;docker login &amp;lt;your-domain-name&amp;gt;&lt;/code&gt; and enter your username, password and e-mail address.&lt;/p&gt;

&lt;h2 id=&#34;pushing-a-simple-container:8203300be8c03c5fae40f9de3748014e&#34;&gt;Pushing a simple container&lt;/h2&gt;

&lt;p&gt;Now you can try pushing a simple container to your registry:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker pull hello-world
$ docker tag hello-world &amp;lt;your-domain-name&amp;gt;/&amp;lt;your-username&amp;gt;/hello-world
$ docker push &amp;lt;your-domain-name&amp;gt;/&amp;lt;your-username&amp;gt;/hello-world
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>